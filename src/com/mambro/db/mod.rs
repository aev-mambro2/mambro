// Table names do not follow rust naming 
// conventions, so both the schema and 
// the models will contain objects that 
// have odd names.
#![allow(non_snake_case)]

///! Handles data input and output to our 
///! data store.
///! 
///! Author: A.E.Veltstra
///! Since: 2.19.501.900
///! Version: 2.19.726.1812

/// Models translates our data into data 
/// types and structs understood by rust.
/// It is auto-generated by diesel. 
/// This necessarily is a data-driven
/// structure. A developer should re-wrap
/// these into semantically significant, 
/// domain-specific structures.
pub mod models;

/// Schema reflects the data structures.
/// It is auto-generated by diesel. 
/// Diesel will add a DSL (hence the name)
/// to perform data queries easily.
pub mod schema;

/// Prelude contains things that should have 
/// been included in the main diesel crate,
/// but whatever.
use diesel::prelude::*;

/// DotEnv lets us read configurations from
/// a local file.
use dotenv::dotenv;

/// Env gives access to the world outside
/// of rust and the app.
use std::env;

/// Creates a connection to our data store.
///
/// # Examples
/// ```
/// use crate::com::mambro::db;
///
/// let connection = db::connect();
/// ```
pub fn connect() -> SqliteConnection {
    //initialize the component
    dotenv().ok();

    //fetch the database locator
    let database_url = env::var("DATABASE_URL").expect("DATABASE_URL must be set");

    //create and return the db connection
    SqliteConnection::establish(&database_url)
        .expect("Error connecting to db.")
}
